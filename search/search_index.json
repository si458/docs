{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Documentation for kubenav kubenav is the navigator for your Kubernetes clusters right in your pocket. kubenav is a mobile, desktop and web app to manage Kubernetes clusters and to get an overview of the status of your resources. kubenav is a mobile, desktop and web app to manage Kubernetes clusters. The app provides an overview of all resources in a Kubernetes clusters, including current status information for workloads. The details view for resources provides additional information. It is possible to view logs and events or to get a shell into a container. You can also edit and delete resources or scale your workloads within the app. The app is developed using Ionic Framework and Capacitor . The frontend part of the app is implemented using TypeScript and React functional components. The backend part uses Go mobile for communication with the Kubernetes API server and Cloud Providers. So it is possible to achieve nearly 100% code sharing between the mobile and desktop implementation of kubenav. Features Available for mobile and desktop: kubenav provides the same experience for mobile and desktop, with nearly 100% code sharing. Manage Resources: All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported. Custom Resource Definitions: View all Custom Resource Definitions and mange Custom Resources. Modify Resources: Edit and delete all available resources or scale your Deployments, StatefulSets, DaemonSets. Filter and Search: Filter the resources by Namespace and find them by there name. Status Information: Fast overview of the status of workloads and detailed information including Events. Resource Usage: View the requests, limits and current usage of Pods and Containers. Logs: View the logs of a container or stream the logs in realtime. Terminal: Get a shell into a container, right from your phone. Manage multiple Clusters: Add multiple clusters via kubeconfig or your prefered Cloud Provider, including Google, AWS and Azure. Port-Forwarding: Create a port-forwarding connection to one of your Pods and open the served page in your browser. Prometheus Integration: kubenav allows you to view your Prometheus metrics directly in the dashboard via the Prometheus plugin. Content Mobile : kubenav is available for iOS and Android via the App Store and Google Play . The documentaion for the mobile version can be found in this section. Desktop : This section contains the documentation for the Desktop version of kubenav. Web : If you want to use the web version of kubenav, this is your starting point. Contributing : We love your input. If you want to start contributing, this is your place to go. Repositories kubenav/kubenav : The main repository for kubenav. This repository contains the complete code for the mobile, desktop and web version of kubenav. kubenav/deploy : This repository contains the Kustomize files and the Helm Chart for kubenav. kubenav/docs : This repository contains the documentation for kubenav, which is available at docs.kubenav.io . kubenav/kubenav.io : This repository contains the landing page for kubenav and is available at kubenav.io . kubenav/helm-repository : This repository contains all published Helm Charts.","title":"Home"},{"location":"#welcome-to-the-documentation-for-kubenav","text":"kubenav is the navigator for your Kubernetes clusters right in your pocket. kubenav is a mobile, desktop and web app to manage Kubernetes clusters and to get an overview of the status of your resources. kubenav is a mobile, desktop and web app to manage Kubernetes clusters. The app provides an overview of all resources in a Kubernetes clusters, including current status information for workloads. The details view for resources provides additional information. It is possible to view logs and events or to get a shell into a container. You can also edit and delete resources or scale your workloads within the app. The app is developed using Ionic Framework and Capacitor . The frontend part of the app is implemented using TypeScript and React functional components. The backend part uses Go mobile for communication with the Kubernetes API server and Cloud Providers. So it is possible to achieve nearly 100% code sharing between the mobile and desktop implementation of kubenav.","title":"Welcome to the Documentation for kubenav"},{"location":"#features","text":"Available for mobile and desktop: kubenav provides the same experience for mobile and desktop, with nearly 100% code sharing. Manage Resources: All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported. Custom Resource Definitions: View all Custom Resource Definitions and mange Custom Resources. Modify Resources: Edit and delete all available resources or scale your Deployments, StatefulSets, DaemonSets. Filter and Search: Filter the resources by Namespace and find them by there name. Status Information: Fast overview of the status of workloads and detailed information including Events. Resource Usage: View the requests, limits and current usage of Pods and Containers. Logs: View the logs of a container or stream the logs in realtime. Terminal: Get a shell into a container, right from your phone. Manage multiple Clusters: Add multiple clusters via kubeconfig or your prefered Cloud Provider, including Google, AWS and Azure. Port-Forwarding: Create a port-forwarding connection to one of your Pods and open the served page in your browser. Prometheus Integration: kubenav allows you to view your Prometheus metrics directly in the dashboard via the Prometheus plugin.","title":"Features"},{"location":"#content","text":"Mobile : kubenav is available for iOS and Android via the App Store and Google Play . The documentaion for the mobile version can be found in this section. Desktop : This section contains the documentation for the Desktop version of kubenav. Web : If you want to use the web version of kubenav, this is your starting point. Contributing : We love your input. If you want to start contributing, this is your place to go.","title":"Content"},{"location":"#repositories","text":"kubenav/kubenav : The main repository for kubenav. This repository contains the complete code for the mobile, desktop and web version of kubenav. kubenav/deploy : This repository contains the Kustomize files and the Helm Chart for kubenav. kubenav/docs : This repository contains the documentation for kubenav, which is available at docs.kubenav.io . kubenav/kubenav.io : This repository contains the landing page for kubenav and is available at kubenav.io . kubenav/helm-repository : This repository contains all published Helm Charts.","title":"Repositories"},{"location":"screenshots/","text":"On the following page you can found some screenshots for the desktop and mobile version of kubenav. Desktop Mobile","title":"Screenshots"},{"location":"screenshots/#desktop","text":"","title":"Desktop"},{"location":"screenshots/#mobile","text":"","title":"Mobile"},{"location":"contributing/development/","text":"kubenav requires Node v8.6.0 or later, and NPM version 5.6.0 or later (which is usually automatically installed with the required version of Node). If you have Node and NPM installed, install Ionic CLI: npm install -g ionic Besides Node, kubenav requires Go 1.14 or later and Go mobile , which can be installed using the following commands: go get -u golang.org/x/mobile/cmd/gomobile go install golang.org/x/mobile/cmd/gomobile gomobile init To build the Electron version of kubenav, install the go-astilectron-bundler : go get -u github.com/asticode/go-astilectron-bundler/... go install github.com/asticode/go-astilectron-bundler/astilectron-bundler To build the iOS version of kubenav ensure that you have Xcode and CocoaPods installed. For the Android version you need the Android SDK, which can be installed via Android Studio and the NDK . Also ensure that the ANDROID_HOME and ANDROID_NDK_HOME environment variables are set. Clone the repository, login to GitHub packages and install the required dependencies: git clone git@github.com:kubenav/kubenav.git cd kubenav npm install To use kubenav in your browser you need to build and start the server. The server listening on port 14122 : make build-server && ./bin/server Now you can start the app and open localhost:8100 in your browser: ionic serve You must build the kubenav project at least once before running on any native platform: ionic build make bindings-android make bindings-ios Every time you perform a build (e.g. ionic build ) that changes your web directory (default: build ), you'll need to copy those changes down to your native projects: npx cap sync The native iOS and Android projects are opened in their standard IDEs (Xcode and Android Studio, respectively). Use the IDEs to run kubenav: npx cap open ios npx cap open android You can also run the native iOS or Android app with live reloading: ionic capacitor run android -l --address=0.0.0.0 ionic capacitor run ios -l --address=0.0.0.0 To build the Electron version of kubenav run make build-electron . The app can be found in the cmd/electron/output/<PLATFORM>-amd64 folder: make build-electron","title":"Development"},{"location":"contributing/getting-started/","text":"Every contribution to kubenav is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kubenav as easy as possible you will find more details for the development flow in this documentation. Please follow our Contribution Guideline and our Code of Conduct in all your interactions with the project.","title":"Getting started"},{"location":"contributing/release/","text":"Every new release is created from the master branch. To create a new release the version field in the package.json file must be updated and a new tag must be set. This process is automated via a Makefile : make release-patch make release-minor make release-major When the tag is pushed the changelog will be generated via GitHub Action and saved to the CHANGELOG.md file. When the changelog was generated a new GitHub release can be created with the following naming scheme and the changelog for the current tag as description: Version <TAG> (yyyy-mm-dd) After the release was created another GitHub Action is executed to create the Electron app for macOS, Linux and Windows via go-astilectron-bundler . These files are added to the corresponding release. The following files are available for each release: kubenav-darwin-amd64.tar.gz kubenav-linux-amd64.tar.gz kubenav-windows-amd64.tar.gz Next to the binaries for the desktop version, we are also running a GitHub Action to push a new Docker image to Docker Hub with the following name: kubenav/kubenav:<TAG> . The native iOS and Android app is built manually and submitted to the App Store and Google Play. To prepare the native app, run the following commands: make bindings-android make bindings-ios export REACT_APP_VERSION=<TAG> ionic build npx cap sync npx cap open ios npx cap open android In the standard IDE for iOS (Xcode) and Android (Android Studio) run a clean build and follow the steps to publish the app. Beta Release We are building the binaries for each submitted PR and on a nightly schedule . To test new feature you can always download the binaries from the corresponding GitHub Action. We are also pushing a new Docker image for each master commit to Docker Hub . The images are taged with the corresponding commit hash. To publish a new beta version for iOS and Android you can follow the same steps as for a normal release, except that you have to run make release-beta . The beta versions are available via Apple Testflight and Google Play .","title":"Release"},{"location":"contributing/release/#beta-release","text":"We are building the binaries for each submitted PR and on a nightly schedule . To test new feature you can always download the binaries from the corresponding GitHub Action. We are also pushing a new Docker image for each master commit to Docker Hub . The images are taged with the corresponding commit hash. To publish a new beta version for iOS and Android you can follow the same steps as for a normal release, except that you have to run make release-beta . The beta versions are available via Apple Testflight and Google Play .","title":"Beta Release"},{"location":"desktop/command-line-flags/","text":"The desktopversion of kubenav supports the following command-line flags: kubenav - the navigator for your Kubernetes clusters right in your pocket. Usage: kubenav [flags] kubenav [command] Available Commands: help Help about any command version Print version information for kubenav. Flags: --debug Enable debug mode. -h, --help help for kubenav --kubeconfig string Optional Kubeconfig file. --kubeconfig.exclude string Comma separated list of globs to exclude from the Kubeconfig. This flag must be used in combination with the '--kubeconfig.include' flag. --kubeconfig.include string Comma separated list of globs to include in the Kubeconfig. --kubeconfig.sync Sync the changes from kubenav with the used Kubeconfig file. Use \"kubenav [command] --help\" for more information about a command.","title":"Command-line flags"},{"location":"desktop/configuration/","text":"The desktop version of kubenav will automatic load all configured clusters from the default Kubeconfig file at ~/.kube/config or the KUBECONFIG environment variable. If you want to use another Kubeconfig file, you can start kubenav with the --kubeconfig flag. You can also use the --kubeconfig.include and --kubeconfig.exclude flag to load Kubeconfig files from multiple locations by glob. The following example loads all Kubeconfig files which are starting with kube from the ~/Documents/kubeconfigs-prod and ~/Documents/kubeconfigs-dev folder: kubenav --kubeconfig.include ~/Documents/kubeconfigs-prod/kube*,~/Documents/kubeconfigs-dev/kube* The --kubeconfig.sync flag can be used to write context changes back to your Kubeconfig file, so the context is also changed in your terminal. Attention: kubenav is based on Electron and go-astilectron, which will be downloaded on the first start of the app. Therefore the first start of the app can take a bit longer with a slow internet connection.","title":"Configuration"},{"location":"desktop/getting-started/","text":"We are providing prebuilt binaries for macOS, Linux and Windows. The binaries for the desktop version of kubenav are available through the release page in the kubenav/kubenav repository. When you want to test new features you can also use a build from the nightly schedule. The nightly builds are created via GitHub Action and can be found at https://github.com/kubenav/kubenav/actions .","title":"Getting started"},{"location":"mobile/amazon-web-services/","text":"To use the Amazon Web Services provider to import your EKS cluster you have to provide the following AWS credentials: Value Description Access Key ID Access key for AWS. Secret Key A secret key which corresponds to your Access Key ID . Region Your AWS region. These credentials are also used to mange the authentication against the Kubernetes API server of your EKS cluster. So make sure that the Access Key ID has the rights to get a list of your EKS clusters and to access your cluster.","title":"Amazon Web Services"},{"location":"mobile/getting-started/","text":"The mobile version of kubenav is available for iOS and Android. The app can be downloaded from the App Store and Google Play . You can also download a beta version of kubenav via Apple Testflight and Google Play to test new features before they are published.","title":"Getting started"},{"location":"mobile/google/","text":"You can directly import your GKA clusters from Google Cloud. To import your GKE clusters you have to provide a valide Client ID from a Google OAuth 2.0 application. The instructions on how to configure such an application can be found in the following. Value Description Client ID A valid client id from an application, which was created via the Google Cloud Console . Google OAuth 2.0 Configuration Login to the Google Cloud Console and choose API & Services and then OAuth consent screen from the menu. Click on EDIT APP and add https://www.googleapis.com/auth/cloud-platform to the Scopes for Google APIs section. Then save your OAuth consent screen. Select the Credentials item from the menu to get a new Client ID. Then click on CREATE CREDENTIALS and select OAuth client ID . iOS Use the following settings for iOS: Name: iOS-Client Bundle ID: io.kubenav.kubenav App Store ID: 1494512160 Team ID: 75AP6HWLUD When you confirm your settings, via a click on the Create button, a modal opens with the Client ID you can use for kubenav. Android Use the following settings for Android: Name: Android-Client SHA-1 certificate fingerprint: B1:DA:29:60:CC:C8:18:A4:67:AD:BB:34:77:BB:2C:61:16:BA:CD:6B Package name: io.kubenav.kubenav Attention: If you get an error message \"Duplicate fingerprint: The fingerprint you specified is already used by an Android OAuth2 client ID in this project or another project\" select another SHA-1 certificate fingerprint. When you confirm your settings, via a click on the Create button, a modal opens with the Client ID you can use for kubenav. Activate APIs In the last step you need to enable the Kubernetes Engine API and the Cloud Resource Manager API : Kubernetes Engine API: https://console.cloud.google.com/apis/library/container.googleapis.com Cloud Resource Manager API: https://console.cloud.google.com/apis/library/cloudresourcemanager.googleapis.com","title":"Google"},{"location":"mobile/google/#google-oauth-20-configuration","text":"Login to the Google Cloud Console and choose API & Services and then OAuth consent screen from the menu. Click on EDIT APP and add https://www.googleapis.com/auth/cloud-platform to the Scopes for Google APIs section. Then save your OAuth consent screen. Select the Credentials item from the menu to get a new Client ID. Then click on CREATE CREDENTIALS and select OAuth client ID .","title":"Google OAuth 2.0 Configuration"},{"location":"mobile/google/#ios","text":"Use the following settings for iOS: Name: iOS-Client Bundle ID: io.kubenav.kubenav App Store ID: 1494512160 Team ID: 75AP6HWLUD When you confirm your settings, via a click on the Create button, a modal opens with the Client ID you can use for kubenav.","title":"iOS"},{"location":"mobile/google/#android","text":"Use the following settings for Android: Name: Android-Client SHA-1 certificate fingerprint: B1:DA:29:60:CC:C8:18:A4:67:AD:BB:34:77:BB:2C:61:16:BA:CD:6B Package name: io.kubenav.kubenav Attention: If you get an error message \"Duplicate fingerprint: The fingerprint you specified is already used by an Android OAuth2 client ID in this project or another project\" select another SHA-1 certificate fingerprint. When you confirm your settings, via a click on the Create button, a modal opens with the Client ID you can use for kubenav.","title":"Android"},{"location":"mobile/google/#activate-apis","text":"In the last step you need to enable the Kubernetes Engine API and the Cloud Resource Manager API : Kubernetes Engine API: https://console.cloud.google.com/apis/library/container.googleapis.com Cloud Resource Manager API: https://console.cloud.google.com/apis/library/cloudresourcemanager.googleapis.com","title":"Activate APIs"},{"location":"mobile/kubeconfig/","text":"You can also import a Kubeconfig file to add a new cluster to the kubenav app. Value Description Kubeconfig The content of your Kubeconfig file. You can copy and paste the content of the file into this Input field or you can select the file via the Select Kubeconfig button. Make sure that your Kubeconfig file does not contains paths to the certificate. Instead it should contain the base64 encoded certificate. For example: When your Kubeconfig file has a field certificate-authority with the path to a certificate, you have to replace this field with certificate-authority-data and the base64 encoded value of the certificate. Attention: Make sure that the Kubeconfig file only contains clusters and users, which are not using a Cloud Provider or OIDC for the cluster access. The import for such Kubeconfig files will fail. Please use one of the available Cloud Providers to import such clusters.","title":"Kubeconfig"},{"location":"mobile/manual/","text":"This method can be used, when you want to manually configure each cluster. Value Description Name The name of the cluster, how it will be displayed in kubenav. Server The URL of the Kubernetes API server. Certificate Authority Data The certificate of the Kubernetes API server. This can be the base64 encoded value or the plain certificate. Insecure Skip TLS Verify If you haven't a certificate for the server, you can enabled the insecure mode, to skip the TLS verification. Client Certificate Data The client certificate. This can be the base64 encoded value or the plain certificate. Client Key Data The client key. This can be the base64 encoded value or the plain key. Token The access token for the Kubernetes API server. Username When you are using basic authentication you can use the username and password field. Password When you are using basic authentication you can use the username and password field.","title":"Manual"},{"location":"mobile/microsoft-azure/","text":"To import your AKS clusters from Microsoft Azure your have to provide some credentials. The instructions on how to get/create these credentials can be found in the following. Value Description Subscription ID A unique alphanumeric string that identifies your Azure subscription. Client ID Client ID for your created Application. Client Secret Client Secret for your created Application. Tenant ID A unique id for your application which can be created via the Azure Active Directory. Resource Group Name The name of the resource group, where your AKS clusters were created. Admin Credentials When you activate this toggle kubenav will download the Kubeconfig file with the admin credentials of your user. Microsoft Azure: Creating App Credentials Login to the Microsoft Azure Portal , you need the following information to use the Azure integration for kubenav: Subscription ID Client ID Client Secret Tenant ID Resource Group Name To get a Client ID, Client Secret and Tenant ID, you have to create an App registration , in the Azure Active Directory . For this go to Azure Active Directory , App registrations and create a New registration . You do not need to provide a Redirect URI. After the creation note download the Application (client) ID and Directory (tenant) ID . Then for this App registration go to Certificates & secrets and create a new Client secret . Then for this App registration go to Manifest and set \"oAuth2AllowImplicitFlow\": true . Then save the changed manifest. Next you have to give the new App registration permissions to manage the above resources. For this go to Subscriptions , choose the subscription that you want to use with kubenav, take a note of the Subscription ID and then go to Access control (IAM) in your subscription. There add a new Role assignment between the role Contributor and the Azure AD user, group or service principal that you just created.","title":"Microsoft Azure"},{"location":"mobile/microsoft-azure/#microsoft-azure-creating-app-credentials","text":"Login to the Microsoft Azure Portal , you need the following information to use the Azure integration for kubenav: Subscription ID Client ID Client Secret Tenant ID Resource Group Name To get a Client ID, Client Secret and Tenant ID, you have to create an App registration , in the Azure Active Directory . For this go to Azure Active Directory , App registrations and create a New registration . You do not need to provide a Redirect URI. After the creation note download the Application (client) ID and Directory (tenant) ID . Then for this App registration go to Certificates & secrets and create a new Client secret . Then for this App registration go to Manifest and set \"oAuth2AllowImplicitFlow\": true . Then save the changed manifest. Next you have to give the new App registration permissions to manage the above resources. For this go to Subscriptions , choose the subscription that you want to use with kubenav, take a note of the Subscription ID and then go to Access control (IAM) in your subscription. There add a new Role assignment between the role Contributor and the Azure AD user, group or service principal that you just created.","title":"Microsoft Azure: Creating App Credentials"},{"location":"mobile/oidc/","text":"If you are using an OIDC provider to manage the access to your Kubernetes cluster, you can configure this in the OIDC Provider section within the Add Clusters modal: Value Description Discovery URL The url for your OIDC provider. Client ID A valid client id for your OIDC provider. Client Secret A valid client secret for your OIDC provider. Certificate Authority If your OIDC provider uses a self signed certificate, you must provide this certificate. This field is optional for OIDC providers without a self signed certificate. Refresh Token You can provide a valid refresh token to skip the login process. This field is optional. If the field isn't provided you will be redirected to your OIDC provider to get a refresh token. Attention: You must allow https://kubenav.io/oidc.html as a valid redirect url in the settings of your OIDC provider. When the login process within your OIDC provider is finished, you have to provide the details of your Kubernetes cluster: Value Description Name The name of the cluster, how it will be displayed in kubenav. Server The URL of the Kubernetes API server. Certificate Authority Data The certificate of the Kubernetes API server. This can be the base64 encoded value or the plain certificate. Insecure Skip TLS Verify If you haven't a certificate for the server, you can enabled the insecure mode, to skip the TLS verification.","title":"OIDC"},{"location":"web/command-line-flags/","text":"The Docker image for kubenav supports the following command-line flags: kubenav - the navigator for your Kubernetes clusters right in your pocket. Usage: kubenav [flags] kubenav [command] Available Commands: help Help about any command version Print version information for kubenav. Flags: --debug Enable debug mode. --debug.ionic string Path to the Ionic app. (default \"build\") -h, --help help for kubenav --incluster Use the in cluster configuration. --kubeconfig string Optional Kubeconfig file. --plugin.prometheus.address string The address for Prometheus. --plugin.prometheus.enabled Enable the Prometheus plugin. Use \"kubenav [command] --help\" for more information about a command.","title":"Command-line flags"},{"location":"web/getting-started/","text":"kubenav is not only available for desktop and mobile, it can also be deployed to your Kubernetes cluster. The following page shows how kubenav can be deployed using Kustomize or Helm . The manifests for Kustomize and the Helm Chart can be found in the kubenav/deploy repository. The Docker image is available at Docker Hub .","title":"Getting started"},{"location":"web/helm/","text":"You can deploy kubenav into your Kubernetes cluster via Helm : helm repo add kubenav https://kubenav.github.io/helm-repository helm repo update kubectl create namespace kubenav helm upgrade --install --namespace kubenav kubenav kubenav/kubenav Values Value Description Default replicaCount Number of replicas which should be created. 1 image.repository The repository of the Docker image. kubenav/kubenav image.tag The tag of the Docker image which should be used. 3.0.0 image.pullPolicy The pull policy for the Docker image, IfNotPresent imagePullSecrets Secrets which can be used to pull the Docker image. [] nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" deployment.mode Set the mode how kubenav should be deployed. This must be incluster or kubeconfig . incluster deployment.kubeconfig When the kubeconfig mode is used. This must be a base64 encoded Kubeconfig file. \"\" plugins.prometheus.enabled Enables the Prometheus plugin. false plugins.prometheus.address The address of Prometheus. \"\" rbac.create Create the cluster role and cluster role binding. true rbac.name The name of the cluster role and cluster role binding, which should be created/used by kubenav. kubenav rbac.name The permissions which kubenav should have. This must be admin or viewer . admin serviceAccount.create Create the service account. true serviceAccount.annotations Additional annotations for the service account. true serviceAccount.name The name of the service account, which should be created/used by kubenav. kubenav podSecurityContext Security context for the kubenav pod. {} securityContext Security context for the kubenav container. {} service.type Type of the service which is created. ClusterIP service.port Port of the service which is created. 80 ingress.enabled Create an ingress. false ingress.annotations Additional annotations for the ingress. {} ingress.hosts Hosts for the ingress. [] ingress.tls TLS configuration for the ingress. [] resources Set resources for the operator. {} nodeSelector Set a node selector. {} tolerations Set tolerations. [] affinity Set affinity. {} Contributing Each contribution to kubenav is welcome. If you make changes to the Helm chart you have to bump the version in the helm/Chart.yaml file. Then a new version of the Helm chart is automatically published when your PR is merged into the master branch. When you add a new value to the helm/values.yaml file, please also adjust the documentation .","title":"Helm"},{"location":"web/helm/#values","text":"Value Description Default replicaCount Number of replicas which should be created. 1 image.repository The repository of the Docker image. kubenav/kubenav image.tag The tag of the Docker image which should be used. 3.0.0 image.pullPolicy The pull policy for the Docker image, IfNotPresent imagePullSecrets Secrets which can be used to pull the Docker image. [] nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" deployment.mode Set the mode how kubenav should be deployed. This must be incluster or kubeconfig . incluster deployment.kubeconfig When the kubeconfig mode is used. This must be a base64 encoded Kubeconfig file. \"\" plugins.prometheus.enabled Enables the Prometheus plugin. false plugins.prometheus.address The address of Prometheus. \"\" rbac.create Create the cluster role and cluster role binding. true rbac.name The name of the cluster role and cluster role binding, which should be created/used by kubenav. kubenav rbac.name The permissions which kubenav should have. This must be admin or viewer . admin serviceAccount.create Create the service account. true serviceAccount.annotations Additional annotations for the service account. true serviceAccount.name The name of the service account, which should be created/used by kubenav. kubenav podSecurityContext Security context for the kubenav pod. {} securityContext Security context for the kubenav container. {} service.type Type of the service which is created. ClusterIP service.port Port of the service which is created. 80 ingress.enabled Create an ingress. false ingress.annotations Additional annotations for the ingress. {} ingress.hosts Hosts for the ingress. [] ingress.tls TLS configuration for the ingress. [] resources Set resources for the operator. {} nodeSelector Set a node selector. {} tolerations Set tolerations. [] affinity Set affinity. {}","title":"Values"},{"location":"web/helm/#contributing","text":"Each contribution to kubenav is welcome. If you make changes to the Helm chart you have to bump the version in the helm/Chart.yaml file. Then a new version of the Helm chart is automatically published when your PR is merged into the master branch. When you add a new value to the helm/values.yaml file, please also adjust the documentation .","title":"Contributing"},{"location":"web/kustomize/","text":"You can deploy kubenav into your Kubernetes cluster via Kustomize : kubectl apply --kustomize github.com/kubenav/deploy/kustomize To access kubenav run the following command: kubectl port-forward --namespace kubenav svc/kubenav 14122","title":"Kustomize"},{"location":"web/multi-cluster-access/","text":"Attention: When kubenav runs inside a Kubernetes cluster with the --kubeconfig flag and the Prometheus plugin enabled ( --plugin.prometheus.enabled ) it will only use the Prometheus instance, which is running in the same cluster. Kustomize The deployment shown in the kubenav/deploy repository deploys kubenav with the --incluster flag. This means kubenav has only access to the cluster were it is deployed in. To deploy kubenav with access to multiple cluster you have to mount a Kubeconfig file into the kubenav container and add the --kubeconfig flag. The following example shows the changes you have to made to the deployment.yaml file to access multiple clusters from the same kubenav instance: spec: template: spec: containers: - name: kubenav args: - --kubeconfig=/kubenav/kubeconfig/kubeconfig volumeMounts: - name: kubeconfig mountPath: '/kubenav/kubeconfig' readOnly: true volumes: - name: kubeconfig secret: secretName: kubeconfig The above example mounts a secret named kubeconfig into the kubenav pod and makes use of the Kubeconfig via the --kubeconfig flag. The secret must look as follows: --- apiVersion: v1 kind: Secret metadata: name: kubeconfig data: kubeconfig: <REPLACE WITH YOUR BASE64 ENCODED KUBECONFIG> type: Opaque The value for the data.kubeconfig key can be created with cat ~/.kube/config | base64 . Helm You can choose this mode also with the Helm Chart, for that you have to set the deployment.mode value to kubeconfig and you have to provide your base64 encoded Kubeconfig via the deployment.kubeconfig value.","title":"Configure access to multiple clusters"},{"location":"web/multi-cluster-access/#kustomize","text":"The deployment shown in the kubenav/deploy repository deploys kubenav with the --incluster flag. This means kubenav has only access to the cluster were it is deployed in. To deploy kubenav with access to multiple cluster you have to mount a Kubeconfig file into the kubenav container and add the --kubeconfig flag. The following example shows the changes you have to made to the deployment.yaml file to access multiple clusters from the same kubenav instance: spec: template: spec: containers: - name: kubenav args: - --kubeconfig=/kubenav/kubeconfig/kubeconfig volumeMounts: - name: kubeconfig mountPath: '/kubenav/kubeconfig' readOnly: true volumes: - name: kubeconfig secret: secretName: kubeconfig The above example mounts a secret named kubeconfig into the kubenav pod and makes use of the Kubeconfig via the --kubeconfig flag. The secret must look as follows: --- apiVersion: v1 kind: Secret metadata: name: kubeconfig data: kubeconfig: <REPLACE WITH YOUR BASE64 ENCODED KUBECONFIG> type: Opaque The value for the data.kubeconfig key can be created with cat ~/.kube/config | base64 .","title":"Kustomize"},{"location":"web/multi-cluster-access/#helm","text":"You can choose this mode also with the Helm Chart, for that you have to set the deployment.mode value to kubeconfig and you have to provide your base64 encoded Kubeconfig via the deployment.kubeconfig value.","title":"Helm"}]}